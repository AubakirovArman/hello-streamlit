import clickhouse_connect
import logging
from typing import List, Union, Generator, Iterator
import os
from pydantic import BaseModel
import aiohttp
import asyncio

logging.basicConfig(level=logging.DEBUG)

class Pipeline:
    class Valves(BaseModel):
        DB_HOST: str
        DB_PORT: str
        DB_USER: str
        DB_PASSWORD: str
        DB_DATABASE: str

    def __init__(self):
        self.name = "ClickHouse Database Query"
        self.client = None  # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ClickHouse

        self.valves = self.Valves(
            **{
                "DB_HOST": os.getenv("CH_HOST", "195.12.114.20"),
                "DB_PORT": os.getenv("CH_PORT", "8123"),
                "DB_USER": os.getenv("CH_USER", "default"),
                "DB_PASSWORD": os.getenv("CH_PASSWORD", "Nitec123"),
                "DB_DATABASE": os.getenv("CH_DB", "FR"),
            }
        )

    def init_db_connection(self):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ClickHouse.
        """
        try:
            self.client = clickhouse_connect.get_client(
                host=self.valves.DB_HOST,
                port=int(self.valves.DB_PORT),
                username=self.valves.DB_USER,
                password=self.valves.DB_PASSWORD,
                database=self.valves.DB_DATABASE
            )
            logging.info("‚úÖ Connection to ClickHouse established successfully")
        except Exception as e:
            logging.error(f"‚õî Error connecting to ClickHouse: {e}")

    async def on_startup(self):
        """
        –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞ OpenWebUI.
        """
        self.init_db_connection()

    async def on_shutdown(self):
        """
        –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞ OpenWebUI.
        """
        if self.client:
            self.client.close()
            logging.info("üîå ClickHouse connection closed.")

    def execute_query(self, query: str):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å –≤ ClickHouse –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
        """
        try:
            result = self.client.query(query)
            return str(result.result_rows)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        except Exception as e:
            logging.error(f"‚õî Query execution error: {e}")
            return f"‚ùå Query execution error: {e}"

    def pipe(self, user_message: str, model_id: str, messages: List[dict], body: dict) -> Union[str, Generator, Iterator]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å –≤ ClickHouse.
        """
        try:
            query = user_message.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            if not query.lower().startswith(("select", "show", "describe")):
                return "‚õî Only SELECT, SHOW, or DESCRIBE queries are allowed!"

            result = self.execute_query(query)
            return result

        except Exception as e:
            logging.error(f"‚õî Unexpected error: {e}")
            return f"‚ùå Unexpected error: {e}"
